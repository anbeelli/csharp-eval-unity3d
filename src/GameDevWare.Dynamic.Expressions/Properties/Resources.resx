<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EXCEPTION_BOUNDEXPR_ARGSDOESNTMATCHPARAMS" xml:space="preserve">
    <value>Count of passed arguments doesn't match parameters count.</value>
  </data>
  <data name="EXCEPTION_BOUNDEXPR_BODYRESULTDOESNTMATCHRESULTTYPE" xml:space="preserve">
    <value>Body's result type doesn't match expression's result type.</value>
  </data>
  <data name="EXCEPTION_BOUNDEXPR_CANTCONVERTARG" xml:space="preserve">
    <value>Can't convert argument '{0}' ('{2}') to required type '{1}'.</value>
  </data>
  <data name="EXCEPTION_BOUNDEXPR_WRONGNUMPARAMS" xml:space="preserve">
    <value>Wrong number of parameters. Make sure parameter count matches expression's signature.</value>
  </data>
  <data name="EXCEPTION_BOUNDEXPR_WRONGPARAMETERTYPE" xml:space="preserve">
    <value>One of parameters has invalid type. Make sure parameter types matches expression's signature.</value>
  </data>
  <data name="EXCEPTION_BIND_FAILEDTOBIND" xml:space="preserve">
    <value>An error occured while trying to build '{0}' expression: {1}</value>
  </data>
  <data name="EXCEPTION_BIND_CLOSEDDELEGATETYPEISEXPECTED" xml:space="preserve">
    <value>Invalid lambda type '{0}'. A closed delegate type is expected in lambda type declaration.</value>
  </data>
  <data name="EXCEPTION_BIND_FAILEDTOBINDGENERICARGUMENTSTOTYPE" xml:space="preserve">
    <value>Failed to bind generic arguments '{0}' to type '{1}'.</value>
  </data>
  <data name="EXCEPTION_BIND_INVALIDCHARLITERAL" xml:space="preserve">
    <value>Invalid char literal '{0}'. It should be one character length.</value>
  </data>
  <data name="EXCEPTION_BIND_INVALIDCONSTANTEXPRESSION" xml:space="preserve">
    <value>Can't convert constant of type '{0}' to literal representation.</value>
  </data>
  <data name="EXCEPTION_BIND_INVALIDLAMBDAARGUMENTS" xml:space="preserve">
    <value>Invalid argument types or count for lambda of type '{0}'.</value>
  </data>
  <data name="EXCEPTION_BIND_MISSINGATTRONNODE" xml:space="preserve">
    <value>Missing or wrong '{0}' attribute on one of expression nodes.</value>
  </data>
  <data name="EXCEPTION_BIND_MISSINGORWRONGARGUMENT" xml:space="preserve">
    <value>Missing or wrong '{0}' argument.</value>
  </data>
  <data name="EXCEPTION_BIND_RENDERFAILED" xml:space="preserve">
    <value>An error occured while trying to render '{0}' expression: {1}</value>
  </data>
  <data name="EXCEPTION_BIND_TOOMANYARGUMENTS" xml:space="preserve">
    <value>Too many arguments. Maximum number of supported arguments '{0}'.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOAPPLYNULLCONDITIONALOPERATORONTYPEREF" xml:space="preserve">
    <value>Unable to apply null-conditional operator on type '{0}'.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOBINDCALL" xml:space="preserve">
    <value>Unable to find method '{0}' on type '{1}' accepting {2} arguments.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOBINDCONSTRUCTOR" xml:space="preserve">
    <value>Unable to find constructor on type '{0}' accepting specified arguments.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOBINDDELEG" xml:space="preserve">
    <value>Unable to invoke delegate {0}({1}) with specified arguments.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOBINDINDEXER" xml:space="preserve">
    <value>Unable to find indexing property on type '{0}' accepting specified arguments.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOCREATEEXPRWITHPARAMS" xml:space="preserve">
    <value>Unable to create '{0}' expression with these '{1}' parameters.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOINVOKENONDELEG" xml:space="preserve">
    <value>Unable to invoke non-delegate type '{0}'.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETORESOLVEMEMBERONTYPE" xml:space="preserve">
    <value>Unable to find public member with name '{0}' on '{1}' type.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETORESOLVENAME" xml:space="preserve">
    <value>Unable to resolve '{0}'. There is no formal parameter with this name.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETORESOLVETYPE" xml:space="preserve">
    <value>Unable to resolve type '{0}'.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETORESOLVETYPEMULTIPLE" xml:space="preserve">
    <value>Unable to resolve type '{0}'. Can't choose from: '{1}'.</value>
  </data>
  <data name="EXCEPTION_BIND_UNKNOWNEXPRTYPE" xml:space="preserve">
    <value>Unknown expression type '{0}'.</value>
  </data>
  <data name="EXCEPTION_BIND_VALIDDELEGATETYPEISEXPECTED" xml:space="preserve">
    <value>Invalid lambda type '{0}'. A valid delegate type should be specified in lambda type declaration.</value>
  </data>
  <data name="EXCEPTION_COMPIL_NOBINARYOPONTYPE" xml:space="preserve">
    <value>No binary operation '{0}' is defined on type '{1}'.</value>
  </data>
  <data name="EXCEPTION_COMPIL_NOCONVERTIONBETWEENTYPES" xml:space="preserve">
    <value>No conversion operation is defined from '{0}' to '{1}'.</value>
  </data>
  <data name="EXCEPTION_COMPIL_NOUNARYOPONTYPE" xml:space="preserve">
    <value>No unary operation '{0}' is defined on type '{1}'.</value>
  </data>
  <data name="EXCEPTION_COMPIL_ONLYFUNCLAMBDASISSUPPORTED" xml:space="preserve">
    <value>Only System.Func&lt;&gt; lambda types are supported.</value>
  </data>
  <data name="EXCEPTION_COMPIL_UNKNOWNBINARYEXPRTYPE" xml:space="preserve">
    <value>Unknown binary expression type '{0}'.</value>
  </data>
  <data name="EXCEPTION_COMPIL_UNKNOWNEXPRTYPE" xml:space="preserve">
    <value>Unknown expression type {0}.</value>
  </data>
  <data name="EXCEPTION_COMPIL_UNKNOWNUNARYEXPRTYPE" xml:space="preserve">
    <value>Unknown unary expression type '{0}'.</value>
  </data>
  <data name="EXCEPTION_LIST_LISTISEMPTY" xml:space="preserve">
    <value>List is empty.</value>
  </data>
  <data name="EXCEPTION_PARSER_BINARYOPREQOPERAND" xml:space="preserve">
    <value>A binary operation requires two parameters.</value>
  </data>
  <data name="EXCEPTION_PARSER_COLONISEXPRECTED" xml:space="preserve">
    <value>A colon ':' symbol is expected in conditional '?' expression.</value>
  </data>
  <data name="EXCEPTION_PARSER_EXPRESSIONISEMPTY" xml:space="preserve">
    <value>Expression is empty</value>
  </data>
  <data name="EXCEPTION_PARSER_INVALIDCHILDCOUNTOFNODE" xml:space="preserve">
    <value>An invalid children count '{1}' of node '{0}' while {2} is expected.</value>
  </data>
  <data name="EXCEPTION_PARSER_INVALIDCHILDTYPESOFNODE" xml:space="preserve">
    <value>An invalid type of children nodes '{1}' of node '{0}' while '{2}' is expected.</value>
  </data>
  <data name="EXCEPTION_PARSER_OPREQUIRESOPERAND" xml:space="preserve">
    <value>A '{0}' operator requires an operand.</value>
  </data>
  <data name="EXCEPTION_PARSER_OPREQUIRESSECONDOPERAND" xml:space="preserve">
    <value>A '{0}' operator requires a second operand.</value>
  </data>
  <data name="EXCEPTION_PARSER_TERNARYOPREQOPERAND" xml:space="preserve">
    <value>A ternary operation requires three parameters.</value>
  </data>
  <data name="EXCEPTION_PARSER_TYPENAMEEXPECTED" xml:space="preserve">
    <value>A type name is expected.</value>
  </data>
  <data name="EXCEPTION_PARSER_UNARYOPREQOPERAND" xml:space="preserve">
    <value>An unary operation requires one parameter.</value>
  </data>
  <data name="EXCEPTION_PARSER_UNEXPECTEDTOKEN" xml:space="preserve">
    <value>Unexpected token '{0}' in current context.</value>
  </data>
  <data name="EXCEPTION_PARSER_UNEXPECTEDTOKENTYPE" xml:space="preserve">
    <value>Unexpected token type '{0}'.</value>
  </data>
  <data name="EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEBUILDINGTREE" xml:space="preserve">
    <value>Unexpected parser node met '{0}' while building expression tree.</value>
  </data>
  <data name="EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEOTHEREXPECTED" xml:space="preserve">
    <value>A one of these '{0}' tokens are expected.</value>
  </data>
  <data name="EXCEPTION_STRINGUTILS_UNEXPECTEDESCAPESEQ" xml:space="preserve">
    <value>Unknown escape sequence '{0}'.</value>
  </data>
  <data name="EXCEPTION_TOKENIZER_INVALIDCHARLITERAL" xml:space="preserve">
    <value>Invalid char literal.</value>
  </data>
  <data name="EXCEPTION_TOKENIZER_UNEXPECTEDSYMBOL" xml:space="preserve">
    <value>Unexpected symbol '{0}'.</value>
  </data>
  <data name="EXCEPTION_UNBOUNDEXPR_DUPLICATEPARAMNAME" xml:space="preserve">
    <value>Duplicate parameter name '{0}'.</value>
  </data>
  <data name="EXCEPTION_UNBOUNDEXPR_INVALIDPARAMCOUNT" xml:space="preserve">
    <value>Invalid parameters count.</value>
  </data>
  <data name="EXCEPTION_UNBOUNDEXPR_TYPESDOESNTMATCHNAMES" xml:space="preserve">
    <value>Length of types array doesn't match length of names array.</value>
  </data>
  <data name="EXCEPTION_BIND_MISSINGMETHODPARAMETER" xml:space="preserve">
    <value>Missing required method/indexer '{0}' parameter.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLEREMAPPARAMETERSCOUNTMISMATCH" xml:space="preserve">
    <value>Unable to remap expression's parameters with lamda syntax. Parameters count mismatch.</value>
  </data>
  <data name="EXCEPTION_EXECUTION_INVALIDMEMBERFOREXPRESSION" xml:space="preserve">
    <value>Unknown member type '{0}' for MemberAccess expression.</value>
  </data>
  <data name="EXCEPTION_EXECUTION_EXPRESSIONGIVESNULLRESULT" xml:space="preserve">
    <value>Expression '{0}' gives null result.</value>
  </data>
  <data name="EXCEPTION_BIND_MISSINGMETHOD" xml:space="preserve">
    <value>Type '{0}' is missing '{1}' method.</value>
  </data>
  <data name="EXCEPTION_BIND_INVALIDLAMBDABODYTYPE" xml:space="preserve">
    <value>Failed to build lambda expression because body has type '{0}' which is not convertible to result type '{1}.'</value>
  </data>
  <data name="EXCEPTION_BIND_RESTRICTED_MEMBER_INVOCATION" xml:space="preserve">
    <value>Member '{1}.{0}' is not available until  type '{1}' is added as known type in '{2}'.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOBINDMETHOD" xml:space="preserve">
    <value>Unable to bind parameters to method '{0}' on type '{1}'. Parameters doesn't match method. Parameters count '{2}'.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETOBINDMEMBER" xml:space="preserve">
    <value>Unable to bind member '{0}' on type '{1}'. Static, visibility, generic parameters or call parameters doesn't not match.</value>
  </data>
  <data name="EXCEPTION_BIND_UNABLETORESOLVEMETHODONTYPE" xml:space="preserve">
    <value>Unable to resolve method '{0}'.</value>
  </data>
  <data name="EXCEPTION_BIND_FAILEDTOBINDMEMBERBINDINGS" xml:space="preserve">
    <value>Failed to bind member bindings.</value>
  </data>
  <data name="EXCEPTION_BIND_FAILEDTOBINDNEWEXPRESSION" xml:space="preserve">
    <value>Failed to bind 'new' expression.</value>
  </data>
  <data name="EXCEPTION_BIND_FAILEDTOBINDLISTINITIALIZERS" xml:space="preserve">
    <value>Failed to bind list initializer.</value>
  </data>
  <data name="EXCEPTION_BIND_CALLMEMBERISNOTMETHOD" xml:space="preserve">
    <value>Unable to bind call because member '{0}' on type '{1}' is not method.</value>
  </data>
  <data name="EXCEPTION_BIND_MEMBERISNOTMETHOD" xml:space="preserve">
    <value>Referenced member '{0}' on type '{1}' is not method.</value>
  </data>
  <data name="EXCEPTION_BIND_INVALIDLAMBDAPARAMETERTYPE" xml:space="preserve">
    <value>Invalid lambda parameter type '{0}' while '{1}' is expected.</value>
  </data>
  <data name="EXCEPTION_PARSER_MISSING_OPERATOR" xml:space="preserve">
    <value>Missing operator between two or more expressions.</value>
  </data>
  <data name="EXCEPTION_EXECUTION_CANTDONULLVALUE" xml:space="preserve">
    <value>Can't '{1}' on a null value. Expression '{0}' gives null result.</value>
  </data>
  <data name="EXCEPTION_EXECUTION_MULTIPARAMETERINDEXERNOTSUPPORTED" xml:space="preserve">
    <value>Multi-parameter indexers are not supported.</value>
  </data>
</root>
